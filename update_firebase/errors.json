[{"Headers": "Programs will begin with a comment block which includes the program name, description, author, date and an edit history."}, {"Comments": "Whenever the function of a block of code is not immediately obvious, include a comment that explains it. In general, comments should be obtained from and therefore match the algorithm done during the design phase."}, {"Blank Lines": "Blank lines should be used between methods and elsewhere to help clarify the structure of the program and to make it easier to read."}, {"Spaces": "Use additional space characters to help make your code easier to read. Put a space before and after operators:  =, +, -, *, _, %, ... . Put  space after the opening parentheses of a method call & before the parameters. Put a space after each semi-colon in the for loop."}, {"Meaningful names": "All variables, methods and classes will be meaningfully named!"}, {"Naming conventions": "Constants: are all uppercase (e.g. SPEEDOFLIGHT or SPEED_OF_LIGHT).<br> Variables: lowercase but with the first letter of each embedded word except the first, capitalised (eg. sumSoFar).<br> Classes: lowercase, but first letter of every word capitalised (eg. BigNumbers ).<br> Interfaces: follow the same rules as class names.<br> Packages: all lower case! <br>"}, {"Constants": "Named constants should be defined before variables so they are easy to find and change."}, {"Indentation": "Programs (and algorithms) must be correctly laid out & have the body_sub-parts indented k (3) spaces consistently."}, {"Variable declaration_initialization": "Variables should not be initialised when they are declared, but only later given a value as necessitated by the algorithm."}, {"Method": "Write the algorithm for the method separate from the other parts of your design and then simply \"call\" -use_refer- to it as necessary (in exactly the same way you already call_use_refer to Java methods such as those for input, output and square roots!)"}, {"Other": "In case you cannot find the error in the list, pick this one."}]