[{"code": "/* \nauthor: Doren\ndate: 12.11.2019\n*/\n\n/*\nThis is a suggestive pseudo-code on how to play the game.\nTake your time to go through it, as it helps for the next questions. \n*/\nopen crsg(code review serious game)\n\n// login\nif first time -> register ( email, username, password)\nelse -> login (username, password)\n\n// main logic\nfor each of the levels in the screen in order:\n\n  // open level\n  open level (click on \"play this level\")\n  read description of level \n  read code\n  check hint for number of total errors\n\n\n  // find errors\n  for each specific error type in checklist\n\n      // understanding errors\n      if do not know what error means -> check description in guide\n\n      // error found\n      if specific error in code\n      add error\n      add type\n\n      // no more errors to find\n      if number of errors you found is equal to the number of errors from the hint\n          break the loop \n\n  // end level \n  submit\n  check your score\n\n  // go back\n  go back to intro page\n  ", "errors": [{"lines": [1, 4], "reason": "non-explanatory header"}, {"lines": [24, 25], "reason": "extra line"}, {"lines": [33, 34], "reason": "indentation"}]}, {"code": "/* \nauthor: Doren\nfunctionality: returns the biggest prime divisor of a number\ndate: 12.11.2019\n*/\n\npublic class Primes{\n\n    /*\n    This method provides the biggest prime \n    number which divides the number provided.\n    \n    @param n = the number to be calculated\n    @returns biggest factor\n    */\n    public static int dividePrime( int n)\n    {\n        // the biggest prime, \n        // updated in loop\n        int bigPrime = -1;\n        int number = n;\n        \n        // start from 2(the first prime number)\n        // to the square root of n \n        for ( int i = 2; i * i <= number; i++){\n            \n            // in case the number has been divided totally\n            if (number == 1) { \n                break; \n            }\n            \n            // if cannot divide by i, skip\n            // otherwise, remember i as the biggest factor\n            if (number % i != 0) { \n                continue; \n            }\n            bigPrime = i;\n            \n            // while you can still divide the number\n            // with the index, continue dividing\n            while (number % i == 0) {\n                number /= i;\n            }\n        }\n        \n        // return either the last factor which divided n\n        // or n itself, after removing all the factors in it\n        if (number==1){\n            return bigPrime; \n        }\n        else {\n            return number; \n        }\n    }\n    \n    public static void main(String []args){\n        // run code\n        System.out.print(dividePrime(1008));\n    }\n}\n", "errors": [{"lines": [21], "reason": "unnecessary variable"}, {"lines": [29], "reason": "unreachable line"}]}, {"code": "/* \nauthor: Doren\nfunctionality: prints diamond of a number\ndate: 12.11.2019\n*/\n\npublic class HelloWorld{\n    \n    /**\n     * This method prints the diamond of a number. \n     * For example, the diamond of 5 would be:\n          3  \n         2 2 \n        1   1\n         2 2 \n          3  \n     * @param number of the diamond 0<number<10\n     * @return null - we are printing\n    */\n    public static double createDiamond( int number)\n    {\n        // what is the length and width of diamond\n        int size; \n        int first_space; \n        int second_space;\n        int k;  // which number is to be printed next\n         \n        size = number * 2 - 1;\n        first_space = \"\";\n        second_space = \"\";\n        \n        // for each of the lines to be printed\n        for( int i=0; i<size; i++){\n            \n            // create space before printing the number\n            first_space = (number-i-1)% number;\n            if (first_space<0){\n                first_space = - first_space;\n            }\n            for (int sp = 0; sp < first_space ; sp++) System.out.print(\" \");\n                \n            /*\n            Decides on which number to print. For example, for number =4\n            print: 4 3 2 1 2 3 4\n            index: 0 1 2 3 4 5 6\n            */\n            k = 0;\n            if ( i == 0){ \n                // if first one, print 4\n                k = number;\n            }\n            else if( i < number){  \n                // if i in decreasing from top of diamond\n                k = number-i;\n            } \n            else{  \n                // after the biggest horizontal width has passed\n                // index -> print , 4-4+2-> 2, 5-4+2->3\n                k = i - number + 2; // add error here\n            }\n    \n            // print the number\n            System.out.print(k);\n            \n            // if you are not in vertical edges, print twice, \n            // including space in the middle\n            if ( k != number){\n                second_space = size-(first_space*2)-2;\n                for (int sp = 0; sp < second_space ; sp++) System.out.print(\" \");\n                System.out.print(k);\n            }\n            \n                // go to next line\n                System.out.println();\n        }\n        return 0;\n       \n    }\n\n    public static void main(String []args){\n        createDiamond(5);\n    }\n}\n", "errors": [{"lines": [26], "reason": "wrong naming"}, {"lines": [29], "reason": "variable assignment"}, {"lines": [30], "reason": "variable assignment"}, {"lines": [59], "reason": "wrong functionality"}, {"lines": [75, 77], "reason": "indentation"}]}]